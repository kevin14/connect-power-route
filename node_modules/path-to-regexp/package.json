{
  "name": "path-to-regexp",
  "description": "Express style path to RegExp utility",
  "version": "1.0.3",
  "files": [
    "index.js",
    "LICENSE"
  ],
  "scripts": {
    "test": "istanbul cover node_modules/mocha/bin/_mocha -- -R spec"
  },
  "keywords": [
    "express",
    "regexp",
    "route",
    "routing"
  ],
  "component": {
    "scripts": {
      "path-to-regexp": "index.js"
    }
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/pillarjs/path-to-regexp.git"
  },
  "devDependencies": {
    "istanbul": "~0.3.0",
    "mocha": "~1.21.4"
  },
  "dependencies": {
    "isarray": "0.0.1"
  },
  "readme": "# Path-to-RegExp\n\nTurn an Express-style path string such as `/user/:name` into a regular expression.\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n## Installation\n\n```\nnpm install path-to-regexp --save\n```\n\n## Usage\n\n```javascript\nvar pathToRegexp = require('path-to-regexp');\n\n// pathToRegexp(path, keys, options);\n```\n\n- **path** A string in the express format, an array of strings, or a regular expression.\n- **keys** An array to be populated with the keys present in the url.\n- **options**\n  - **sensitive** When `true` the route will be case sensitive. (default: `false`)\n  - **strict** When `false` the trailing slash is optional. (default: `false`)\n  - **end** When `false` the path will match at the beginning. (default: `true`)\n\n```javascript\nvar keys = [];\nvar re = pathToRegexp('/foo/:bar', keys);\n// re = /^\\/foo\\/([^\\/]+?)\\/?$/i\n// keys = [{ name: 'bar', delimiter: '/', repeat: false, optional: false }]\n```\n\n### Parameters\n\nThe path has the ability to define parameters and automatically populate the keys array.\n\n#### Named Parameters\n\nNamed parameters are defined by prefixing a colon to the parameter name (`:foo`). By default, this parameter will match up to the next path segment.\n\n```js\nvar re = pathToRegexp('/:foo/:bar', keys);\n// keys = [{ name: 'foo', ... }, { name: 'bar', ... }]\n\nre.exec('/test/route');\n//=> ['/test/route', 'test', 'route']\n```\n\n#### Suffixed Parameters\n\n##### Optional\n\nParameters can be suffixed with a question mark (`?`) to make the entire parameter optional. This will also make any prefixed path delimiter optional (`/` or `.`).\n\n```js\nvar re = pathToRegexp('/:foo/:bar?', keys);\n// keys = [{ name: 'foo', ... }, { name: 'bar', delimiter: '/', optional: true, repeat: false }]\n\nre.exec('/test');\n//=> ['/test', 'test', undefined]\n\nre.exec('/test/route');\n//=> ['/test', 'test', 'route']\n```\n\n##### Zero or more\n\nParameters can be suffixed with an asterisk (`*`) to denote a zero or more parameter match. The prefixed path delimiter is also taken into account for the match.\n\n```js\nvar re = pathToRegexp('/:foo*', keys);\n// keys = [{ name: 'foo', delimiter: '/', optional: true, repeat: true }]\n\nre.exec('/');\n//=> ['/', undefined]\n\nre.exec('/bar/baz');\n//=> ['/bar/baz', 'bar/baz']\n```\n\n##### One or more\n\nParameters can be suffixed with a plus sign (`+`) to denote a one or more parameters match. The prefixed path delimiter is included in the match.\n\n```js\nvar re = pathToRegexp('/:foo+', keys);\n// keys = [{ name: 'foo', delimiter: '/', optional: false, repeat: true }]\n\nre.exec('/');\n//=> null\n\nre.exec('/bar/baz');\n//=> ['/bar/baz', 'bar/baz']\n```\n\n#### Custom Match Parameters\n\nAll parameters can be provided a custom matching regexp and override the default. Please note: Backslashes need to be escaped in strings.\n\n```js\nvar re = pathToRegexp('/:foo(\\\\d+)', keys);\n// keys = [{ name: 'foo', ... }]\n\nre.exec('/123');\n//=> ['/123', '123']\n\nre.exec('/abc');\n//=> null\n```\n\n#### Unnamed Parameters\n\nIt is possible to write an unnamed parameter that is only a matching group. It works the same as a named parameter, except it will be numerically indexed.\n\n```js\nvar re = pathToRegexp('/:foo/(.*)', keys);\n// keys = [{ name: 'foo', ... }, { name: '0', ... }]\n\nre.exec('/test/route');\n//=> ['/test/route', 'test', 'route']\n```\n\n## Compatibility with Express <= 4.x\n\nPath-To-RegExp breaks compatibility with Express <= 4.x in a few ways:\n\n* RegExp special characters can now be used in the regular path. E.g. `/user[(\\\\d+)]`\n* All RegExp special characters can now be used inside the custom match. E.g. `/:user(.*)`\n* No more support for asterisk matching - use an explicit parameter instead. E.g. `/(.*)`\n* Parameters can have suffixes that augment meaning - `*`, `+` and `?`. E.g. `/:user*`\n* Strings aren't interpreted as literal regexp strings - no more non-capturing groups, lookaheads, lookbehinds or nested matching groups (but you can still pass a regexp manually)\n\n## Live Demo\n\nYou can see a live demo of this library in use at [express-route-tester](http://forbeslindesay.github.com/express-route-tester/).\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/path-to-regexp.svg?style=flat\n[npm-url]: https://npmjs.org/package/path-to-regexp\n[travis-image]: https://img.shields.io/travis/pillarjs/path-to-regexp.svg?style=flat\n[travis-url]: https://travis-ci.org/pillarjs/path-to-regexp\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/path-to-regexp.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/pillarjs/path-to-regexp?branch=master\n[david-image]: http://img.shields.io/david/pillarjs/path-to-regexp.svg?style=flat\n[david-url]: https://david-dm.org/pillarjs/path-to-regexp\n[license-image]: http://img.shields.io/npm/l/path-to-regexp.svg?style=flat\n[license-url]: LICENSE.md\n[downloads-image]: http://img.shields.io/npm/dm/path-to-regexp.svg?style=flat\n[downloads-url]: https://npmjs.org/package/path-to-regexp\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/pillarjs/path-to-regexp/issues"
  },
  "homepage": "https://github.com/pillarjs/path-to-regexp",
  "_id": "path-to-regexp@1.0.3",
  "_from": "path-to-regexp@"
}
